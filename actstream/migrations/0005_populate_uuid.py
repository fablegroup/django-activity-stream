# Generated by Django 1.9.13 on 2021-08-26 19:20
import uuid

from concurrent.futures import ThreadPoolExecutor
import logging

from django.db import migrations, transaction

logger = logging.getLogger(__name__)

NUM_WORKERS = 5

BATCH_SIZE = 1000

DEFAULT_DUPLICATE_UUID = "ebfa1ea3-066e-4549-b26c-87ec3b4cac0a"


def update_uuid(action):
    action.uuid = uuid.uuid4()
    action.save(update_fields=['uuid'])


def gen_uuid(apps, schema_editor):
    count = 0

    Action = apps.get_model('actstream', 'Action')

    while Action.objects.filter(uuid=DEFAULT_DUPLICATE_UUID).exists():
        with transaction.atomic():
            actions = Action.objects.filter(uuid=DEFAULT_DUPLICATE_UUID)[:BATCH_SIZE]
            with ThreadPoolExecutor(max_workers=NUM_WORKERS) as executor:
                executor.map(update_uuid, actions)

            count += BATCH_SIZE
            logger.info("Processed %s records", count)



class Migration(migrations.Migration):

    atomic = False

    dependencies = [
        ('actstream', '0004_add_uuid_and_deleted_flag'),
    ]

    operations = [
        migrations.RunPython(gen_uuid),
    ]
